{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","features/userSlice.js","Firebase.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","discord-logo-png-7634.png","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","console","log","className","onClick","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","useSelector","channelN","prompt","add","fontSize","Avatar","signOut","src","photo","uid","substring","ChatHeader","type","placeholder","Message","message","timestamp","Date","toDate","toISOString","Chat","input","setInput","messages","setMessages","orderBy","objDiv","document","getElementById","scrollTop","scrollHeight","value","disabled","onChange","e","target","preventDefault","FieldValue","serverTimestamp","Login","logo","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","displayName","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42eabfbc.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    channelId : null,\n    channelName: null\n  },\n  reducers: {\n    setChannelInfo : (state,action) => {\n      state.channelId = action.payload.channelId;\n      state.channelName = action.payload.channelName;\n    }\n  },\n});\n\nexport const { setChannelInfo } = appSlice.actions;\n\nexport const selectChannelId = state => state.app.channelId;\n\nexport const selectChannelName = state => state.app.channelName;\n\nexport default appSlice.reducer;\n","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport \"./SidebarChannel.css\"\nimport { setChannelInfo } from \"./features/appSlice\"\n\nfunction SidebarChannel({id,channelName}) {\n\n    const handleChange = ()=>{\n        dispatch(setChannelInfo({\n            channelId : id,\n            channelName : channelName\n        }))\n    }\n\n    const dispatch = useDispatch();\n\n    console.log(channelName);\n    return (\n        <div className=\"sidebarChannel\" onClick={handleChange}>\n            <h4>\n                <span className=\"sidebarChannel__hash \">#</span>{channelName}\n            </h4>\n        </div>\n    )\n}\n\nexport default SidebarChannel\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login : (state,action) => {\r\n      state.user = action.payload\r\n    },\r\n    logout:(state)=>{\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login , logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC7RDCgvmOu6fJU-uI-iFCt2kXw5L95tcA\",\n    authDomain: \"discord-a428d.firebaseapp.com\",\n    projectId: \"discord-a428d\",\n    storageBucket: \"discord-a428d.appspot.com\",\n    messagingSenderId: \"816529233785\",\n    appId: \"1:816529233785:web:8f4de38f90a7f26ded81a8\",\n    measurementId: \"G-XC4GCJ52CF\"\n};\n\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport {auth , provider};\n\nexport default db;\n\n","import React, { useEffect, useState } from 'react'\nimport \"./Sidebar.css\"\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport SidebarChannel from './SidebarChannel';\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\nimport CallIcon from '@material-ui/icons/Call';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { Avatar } from '@material-ui/core';\nimport MicIcon from '@material-ui/icons/Mic';\nimport HeadsetMicOutlinedIcon from '@material-ui/icons/HeadsetMicOutlined';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { selectUser } from \"./features/userSlice\"\nimport { useSelector } from 'react-redux';\nimport  db ,{ auth } from './Firebase';\n\nfunction Sidebar() {\n\n    const [channels, setChannels] = useState([])\n\n    useEffect(() => {\n        db.collection(\"channels\").onSnapshot((snapshot)=>\n        {\n            setChannels(snapshot.docs.map(doc=>({\n                id:doc.id,\n                channel:doc.data()\n            })))\n        })\n    }, [])\n\n    const handleAddChannel = ()=>{\n        const channelN = prompt(\"Enter Channel Name\");\n        if(channelN)\n        {\n            db.collection(\"channels\").add({\n                channelName:channelN\n            })\n        }\n    }\n\n    const handleClick = ()=>{\n        auth.signOut();\n    }\n\n  const user = useSelector(selectUser);\n\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar__top\">\n                <h3>Discord</h3>\n                <ExpandMoreIcon/>\n            </div>\n\n            <div className=\"sidebar__channels\">\n                <div className=\"sidebar__channelsHeader\">\n                    <div className=\"sidebar__header\">\n                        <ExpandMoreIcon/>\n                        <h4>Channels</h4>\n                    </div>\n                        <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\"/>\n                </div>\n                <div className=\"sidebar__channelList\">\n                   {\n                        channels.map(({id,channel})=>{\n                            console.log(id);\n                            console.log(channel.channelName);\n                            return <SidebarChannel key={id} id={id} channelName={channel.channelName}/>\n                        })\n                   }\n                </div>\n            </div>\n\n            <div className=\"sidebar__voice\">\n                <SignalCellularAltIcon     className=\"sidebar__voiceIcon\"\n                fontSize=\"large\"\n                />\n                <div className=\"sidebar__voiceInfo\">\n                    <h3>Voice Connected</h3>\n                    <p>Stream</p>\n                </div>\n\n                <div className=\"sidebar__voiceIcons\">\n                    <InfoOutlinedIcon/>\n                    <CallIcon/>\n                </div>\n\n            </div>\n\n\n            <div className=\"sidebar__profile\">\n                <Avatar className=\"avatar__photo\" onClick={handleClick} src={user.photo} />\n                <div className=\"sidebar__profileInfo\">\n                    <h3>{user.name}</h3>\n                    <p>#{user.uid.substring(0,5)}</p>\n                </div>\n                <div className=\"sidebar__profileIcons\">\n                    <MicIcon/>\n                    <HeadsetMicOutlinedIcon/>\n                    <SettingsIcon/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport \"./ChatHeader.css\"\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport EditLocationSharpIcon from '@material-ui/icons/EditLocationSharp';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\n\n\nfunction ChatHeader({channelName}) {\n\n    return (\n        <div className=\"chatHeader\">\n            <div className=\"chatHeader__left\">\n                <h3>\n                    <span className=\"chatHeader__hash\">\n                        #\n                    </span>\n                    {channelName}\n                </h3>\n            </div>\n            \n            <div className=\"chatHeader__right\">\n                <NotificationsIcon/>\n                <EditLocationSharpIcon/>\n                <PeopleAltIcon/>\n\n                <div className=\"chatHeader__search\">\n                    <input type=\"text\" placeholder=\"Search\"/>\n                    <SearchIcon/>\n                </div>\n                <SendRoundedIcon/>\n                <HelpRoundedIcon/>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatHeader\n","import React from 'react'\nimport \"./Message.css\"\nimport { Avatar } from '@material-ui/core'\nfunction Message({user,message,timestamp}) {\n    // console.log(user);\n    // console.log(new Date(timestamp.toDate()).toUTCString()) ;\n    return (\n        <div className=\"message\">\n            <Avatar src={user?.photo} />\n            \n            <div className=\"message__info\">\n                <h4>{user?.name}\n                    <span className=\"message__timestamp\">{new Date(timestamp?.toDate()).toISOString}</span>\n                </h4>\n                <p>{message}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Message\n","import React, { useEffect, useState } from 'react'\nimport ChatHeader from \"./ChatHeader\";\nimport \"./Chat.css\"\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\nimport GifIcon from '@material-ui/icons/Gif';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport Message from './Message';\nimport {selectChannelId,selectChannelName} from \"./features/appSlice\"\nimport { useSelector } from 'react-redux';\nimport { selectUser } from './features/userSlice';\nimport  db  from \"./Firebase\"\nimport firebase from \"firebase\"\n\nfunction Chat() {\n\n    const [input,setInput] = useState(\"\")\n    const [messages, setMessages] = useState([])\n    const user = useSelector(selectUser);\n    const channelName = useSelector(selectChannelName);\n    const channelId = useSelector(selectChannelId);\n\n    useEffect(() => {\n        if(channelId)\n        {\n            db.collection('channels').doc(channelId).collection(\"messages\").orderBy(\"timestamp\",\"asc\").onSnapshot(snapshot=>(\n                setMessages(snapshot.docs.map(doc => doc.data()))\n            ))\n            console.log(\"Scrolling\")\n            const objDiv = document.getElementById(\"scroll\")\n            objDiv.scrollTop = objDiv.scrollHeight;\n        }\n    }, [channelId])\n\n\n    const sendMessage = (e)=>{\n        e.preventDefault();\n        db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\n            message:input,\n            user:user,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n        })\n        setInput(\"\");\n    }\n\n    return (\n        <div className=\"chat\"> \n            <ChatHeader channelName={channelName} />\n                <div className=\"chat__messages\" id=\"scroll\">\n                    {messages.map(({message,user,timestamp})=>(\n                        <Message message={message} timestamp={timestamp} user={user}/>\n                    ))}\n                </div>\n            <div className=\"chat__input\">\n                <AddCircleIcon fontSize=\"large\"/>\n                <form >\n                    <input value={input}\n                        disabled={!channelId} \n                        onChange={(e)=> setInput(e.target.value)} \n                        placeholder={`Message #${channelName}`}\n                    />\n                    <button onClick={sendMessage} className=\"chat__inputButton\" type=\"submit\">Send Message</button>\n                </form>\n                <div className=\"chat__inputIcons\">\n                    <CardGiftcardIcon fontSize=\"large\"/>\n                    <GifIcon fontSize=\"large\"/>\n                    <EmojiEmotionsIcon fontSize=\"large\"/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","export default __webpack_public_path__ + \"static/media/discord-logo-png-7634.2f8d7ce8.png\";","import React from 'react'\nimport \"./Login.css\"\nimport logo from \"./discord-logo-png-7634.png\"\nimport { Button } from '@material-ui/core'\nimport { auth , provider} from \"./Firebase\"\n\nfunction Login() {\n\n    const signin = ()=>{\n        auth.signInWithPopup(provider)\n        .catch(error => alert(error.message));\n    }\n\n    return (\n        <div className=\"login\">\n            <div className=\"login__logo\">\n                <img className=\"image\" src={logo} alt=\"\"/>\n            </div>\n            <Button onClick={signin}>Sign In</Button>\n        </div>\n    )\n}\n\nexport default Login\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Sidebar from \"./Sidebar\"\r\nimport Chat from './Chat';\r\nimport { selectUser } from \"./features/userSlice\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Login from \"./Login\";\r\nimport { login, logout } from \"./features/userSlice\"\r\nimport { auth } from './Firebase';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser)=>{\r\n      console.log(\"user is\",authUser);\r\n      if(authUser)\r\n      {\r\n        //Logged In\r\n        dispatch(login({\r\n          uid:authUser.uid,\r\n          photo:authUser.photoURL,\r\n          name:authUser.displayName,\r\n          email:authUser.email\r\n        }))\r\n      }\r\n      else\r\n      {\r\n        //Logged Out\r\n        dispatch(logout())\r\n      }\r\n    })\r\n  }, [dispatch]);\r\n  \r\n  const user = useSelector(selectUser);\r\n\r\n  console.log(\"Redux\",user);\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {\r\n        user ? (\r\n        <>\r\n        <Sidebar /> \r\n        <Chat/>\r\n        </>\r\n        ) : \r\n        <Login/>\r\n        }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\r\n\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from \"../features/userSlice\";\r\nimport appReducer from '../features/appSlice';\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app : appReducer,\r\n  }, \r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}